version: "3.7"

services:
  # Define o Serviço da API Cal.com
  calcom-api:
    # Define a imagem da API (será construída localmente)
    build:
      context: .
      dockerfile: Dockerfile
    # Define o hotname do container
    hostname: "{{.Service.Name}}.{{.Task.Slot}}"
    # Define a Rede do Docker
    networks:
      - network_swarm_public
    # Define as Variáveis de Ambiente
    environment:
      # Variáveis Genéricas
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      # Define a URL da API
      - API_URL=https://api-cal.felipeluismartins.com
      # Define as Variáveis de Banco de Dados
      - DATABASE_URL=postgresql://postgres:lg3k5qtS37nBDTA@postgres:5432/calcom_pdv
      # Definição da Variável para conexão direta com o banco de dados
      - DATABASE_DIRECT_URL=postgresql://postgres:lg3k5qtS37nBDTA@postgres:5432/calcom_pdv
      # Rotas Customizadas
      - BOOKING_ROUTE=/booking
      - EVENT_TYPE_ROUTE=/event-types
      - USER_ROUTE=/user
      - HEALTH_ROUTE=/health
      - ROOT_ROUTE=/
    # Configura o Modo de Deploy da Aplicação
    deploy:
      # Configura o modo de deploy
      mode: replicated
      # Configura o numero de replicas
      replicas: 1
      placement:
        constraints:
          - node.role == manager
          # - node.hostname == worker1
      resources:
        limits:
          # Define a quantidade de CPU para a API para evitar travamento do Host
          cpus: "0.5"
          # Define a quantidade de RAM para a API para evitar travamento do Host
          memory: 512M
        reservations:
          # Define a quantidade mínima de CPU
          cpus: "0.25"
          # Define a quantidade mínima de RAM
          memory: 256M
      # Define as Configurações do Traefik
      labels:
        # Habilita o Traefik
        - traefik.enable=true
        # Define o Endereço da API
        - traefik.http.routers.calcom-api.rule=Host(`api-cal.felipeluismartins.com`)
        # Define o tipo de entrada para HTTPS
        - traefik.http.routers.calcom-api.entrypoints=websecure
        # Define o certificado
        - traefik.http.routers.calcom-api.tls.certresolver=letsencryptresolver
        # Define o serviço da API
        - traefik.http.routers.calcom-api.service=calcom-api
        # Define a porta da API
        - traefik.http.services.calcom-api.loadbalancer.server.port=3000
        # Define os Headers da API
        - traefik.http.services.calcom-api.loadbalancer.passHostHeader=true
        # Define middleware para CORS
        - traefik.http.middlewares.calcom-api-cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS
        - traefik.http.middlewares.calcom-api-cors.headers.accesscontrolallowheaders=Origin,X-Requested-With,Content-Type,Accept,Authorization
        - traefik.http.middlewares.calcom-api-cors.headers.accesscontrolalloworiginlist=*
        - traefik.http.routers.calcom-api.middlewares=calcom-api-cors
    # Define dependências
    depends_on:
      - postgres
    # Define restart policy
    restart: unless-stopped

  # Define o Serviço do PostgreSQL
  postgres:
    # Define a imagem do PostgreSQL
    image: postgres:15-alpine
    # Define o hotname do container
    hostname: "{{.Service.Name}}.{{.Task.Slot}}"
    # Define a Rede do Docker
    networks:
      - network_swarm_public
    # Define as Variáveis de Ambiente
    environment:
      # Define as credenciais do PostgreSQL
      - POSTGRES_DB=calcom_pdv
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=lg3k5qtS37nBDTA
      # Define configurações do PostgreSQL
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    # Configura o Modo de Deploy da Aplicação
    deploy:
      # Configura o modo de deploy
      mode: replicated
      # Configura o numero de replicas
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          # Define a quantidade de CPU para o PostgreSQL
          cpus: "1"
          # Define a quantidade de RAM para o PostgreSQL
          memory: 1024M
        reservations:
          # Define a quantidade mínima de CPU
          cpus: "0.5"
          # Define a quantidade mínima de RAM
          memory: 512M
      # Define as Configurações do Traefik (apenas para acesso interno)
      labels:
        # Desabilita o Traefik para o PostgreSQL (acesso interno apenas)
        - traefik.enable=false
    # Define volumes para persistência
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    # Define restart policy
    restart: unless-stopped

  # Define o Serviço do pgAdmin (opcional - para gerenciamento do banco)
  pgadmin:
    # Define a imagem do pgAdmin
    image: dpage/pgadmin4:latest
    # Define o hotname do container
    hostname: "{{.Service.Name}}.{{.Task.Slot}}"
    # Define a Rede do Docker
    networks:
      - network_swarm_public
    # Define as Variáveis de Ambiente
    environment:
      # Define as credenciais do pgAdmin
      - PGADMIN_DEFAULT_EMAIL=admin@felipeluismartins.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=False
    # Configura o Modo de Deploy da Aplicação
    deploy:
      # Configura o modo de deploy
      mode: replicated
      # Configura o numero de replicas
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          # Define a quantidade de CPU para o pgAdmin
          cpus: "0.5"
          # Define a quantidade de RAM para o pgAdmin
          memory: 512M
        reservations:
          # Define a quantidade mínima de CPU
          cpus: "0.25"
          # Define a quantidade mínima de RAM
          memory: 256M
      # Define as Configurações do Traefik
      labels:
        # Habilita o Traefik
        - traefik.enable=true
        # Define o Endereço do pgAdmin
        - traefik.http.routers.pgadmin.rule=Host(`pgadmin.felipeluismartins.com`)
        # Define o tipo de entrada para HTTPS
        - traefik.http.routers.pgadmin.entrypoints=websecure
        # Define o certificado
        - traefik.http.routers.pgadmin.tls.certresolver=letsencryptresolver
        # Define o serviço do pgAdmin
        - traefik.http.routers.pgadmin.service=pgadmin
        # Define a porta do pgAdmin
        - traefik.http.services.pgadmin.loadbalancer.server.port=80
        # Define os Headers do pgAdmin
        - traefik.http.services.pgadmin.loadbalancer.passHostHeader=true
    # Define dependências
    depends_on:
      - postgres
    # Define restart policy
    restart: unless-stopped

# Define os Volumes
volumes:
  postgres_data:
    driver: local

# Define as Redes
networks:
  network_swarm_public:
    name: network_swarm_public
    external: true
